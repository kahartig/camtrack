# convert_cam_to_arl.jpy
# by Kara Hartig
# last modified: August 11, 2020
# based on:
#     convert_cam_to_arl.py by Pratap Singh
#     wrfout2arl.html by Yaqiang Wang
# Convert netCDF output files from the Community Atmosphere Model v5
# corresponding to a series of cold events to binary .arl input format for
# HYSPLIT trajectory backtracking
#
# This script is in Jython, not standard Python, and must be run with the
# MeteoInfo software suite (http://www.meteothinker.com/index.html)
# by Yaqiang Wang.
# As it runs, the code produces and deletes a file called cam_to_arl_temp.arl in
# the output directory.  This file must not be tampered with while the code is 
# running.
# To run within MeteoInfo main directory:
#    on Unix: >>./milab.sh convert_event_cam2arl.jpy
#    on Mac: >>./milab_mac.sh convert_event_cam2arl.jpy

# Imports
import datetime


# Set location of cold events .csv file
#   must contain columns: eventID, cftime date, lat, lon
events_file = '/n/tzipermanfs2/khartig/arctic_air_suppression/PI_CAM5/sample_coldtail_v1/cold_events.csv'

# Set data folders
indatadir = '/n/tzipermanfs2/khartig/arctic_air_suppression/PI_CAM5/CAM_winters/'
outdatadir = '/n/tzipermanfs2/khartig/arctic_air_suppression/PI_CAM5/sample_coldtail_v1/ARL_event_files/'

# Set case name
case_name = 'pi_3h_004'


# Metadata for input netCDF data files
#     variables are spread across 4 netCDF files
#     dictionaries will be used to access the relevant file
#     ASSUMES that all files (h1 thru h4) have same metadata (same time period, lat/lon, etc)
name_to_h = dict.fromkeys(['CLDHGH','CLDICE','CLDLIQ','CLDLOW','CLDMED',
                           'CLDTOT','CLOUD','Q','QFLX','QREFHT','RELHUM',
                           'TGCLDIWP','TGCLDLWP'], 'h1')
name_to_h.update(dict.fromkeys(['FLDS','FLDSC','FLNS','FLNSC','FLNT','FLNTC',
                                'FLUT','FLUTC','FSDS','FSDSC','FSNS','FSNSC',
                                'FSNT','FSNTC','FSNTOA','FSNTOAC','FSUTOA',
                                'LHFLX','LWCF','QRL','QRS','SHFLX','SOLIN',
                                'SWCF'], 'h2'))
name_to_h.update(dict.fromkeys(['OMEGA','PBLH','PHIS','PS','PSL','U','V','V10',
                                'VQ','VT','Z3','ZBOT'], 'h3'))
name_to_h.update(dict.fromkeys(['ICEFRAC','LANDFRAC','OCNFRAC','T','TREFHT',
                                'TS'], 'h4'))

# Map CAM variables to ARL variables
#    Surface variables:
varmap_2d = {'PS': 'PRSS', 'TREFHT': 'T02M'}
unitmap_2d = {'PS': 0.01, 'TREFHT': 1.}
#    Full domain variables:
varmap_3d = {'T': 'TEMP', 'U': 'UWND', 'V': 'VWND', 'OMEGA': 'WWND', 'Z3': 'HGTS', 'RELHUM': 'RELH'}
unitmap_3d = {'T': 1., 'U': 1., 'V': 1., 'OMEGA': 0.01, 'Z3': 1., 'RELHUM': 1.}

# Set up conversion from noleap ordinal time to year/month/day/hour
def custom_ord2date(ordinal_time):
    base_date = {'year': 1, 'day': 1, 'hour': 0} # assumes time unit is 'days since 0001-01-01 00:00:00'
    dpm_cum = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365] # cumulative days per month
    year, ordinal_day = divmod(ordinal_time, 365)
    year = int(year) + base_date['year']
    day_of_year, ordinal_hour = divmod(ordinal_day, 1)
    day_of_year = int(day_of_year) + base_date['day']
    hour = int(ordinal_hour * 24)
    month = next(idx for idx,dpm in enumerate(dpm_cum) if day_of_year <= dpm)
    day_of_month = day_of_year - dpm_cum[month - 1]
    return datetime.datetime(year, month, day_of_month, hour)

# Loop over all events
with open(events_file) as f:
    header = next(f)
    lines = f.readlines()
    for event_line in lines:
        event_ID, ord_time, lat_str, lon_str = (event_line.strip()).split(',')
        lat = float(lat_str)
        lon = float(lon_str)
        event_date = custom_ord2date(ord_time)
        print('Begin event {} on date {:04d}-{:02d}-{:02d}:'.format(event_ID,
            event_date.year, event_date.month, event_date.day))

        # Determine winter years identifier
        if event_date.month > 11:
            start_year = event_date.year
        elif event_date.month < 3:
            start_year = event_date.year - 1
        else:
            raise ValueError('Unexpected month {} for event {}: should be 12, 1, or 2'.format(event_date.month, event_ID))
        end_year = start_year + 1
        winter_string = '{:02d}{:02d}'.format(start_year, end_year)

        # Set time window for timestamps to include in ARL file
        window_start = ord_time - 11  # start 11 days before event
        window_end = ord_time # end at time of event

        # Read input netCDF files
        in_file_h1 = addfile(os.path.join(indatadir, case_name + '_' + winter_string + '_h1.nc'))
        in_file_h2 = addfile(os.path.join(indatadir, case_name + '_' + winter_string + '_h2.nc'))
        in_file_h3 = addfile(os.path.join(indatadir, case_name + '_' + winter_string + '_h3.nc'))
        in_file_h4 = addfile(os.path.join(indatadir, case_name + '_' + winter_string + '_h4.nc'))
        h_to_file = {'h1': in_file_h1, 'h2': in_file_h2, 'h3': in_file_h3, 'h4': in_file_h4}

        # Touch the output file without writing to it:
        out_filename = os.path.join(outdatadir, case_name + '_event' + event_ID + '.arl')
        open(out_filename, 'a').close();

        # Load file for sample data (variables shared across all files)
        sample_file = in_file_h3  # contains 3-D wind data
        sample_variable = sample_file['U']  # sample variable for calculating dimensions and levels

        # dimensions of (3-D) input netCDF variables
        lon_index = 3
        lat_index = 2
        level_index = 1
        #time_index = 0
        nx = sample_variable.dimlen(lon_index)  # longitude
        ny = sample_variable.dimlen(lat_index)  # latitude
        nz = sample_variable.dimlen(level_index)  # vertical level

        # convert vertical level coefficients to ECMWF-format levels
        hyam = sample_file['hyam'][:]
        hybm = sample_file['hybm'][:]
        P_0 = sample_file.read('P0').getFloat(0)  # retrieves value for P_0 from file object
        P_0_units = str(sample_file['P0'].attrvalue('units')[0])
        if P_0_units != 'Pa':
            raise ValueError("Reference pressure P0 is not in units of Pa. Change definition of 'levels' so that integer part 'a' is in hPa.")
        a = hyam[::-1] * P_0 / 100.0  # reverse index order to get surface -> TOA; factor of 100 to convert to hPa
        b = hybm[::-1]  # reverse index order to get surface -> TOA; dimensionless, no need to convert units
        levels = [int(round(a[ind])) + b[ind] for ind in range(len(a))]

        # loop over times, append each to end of ARL file
        num_times = sample_file.timenum()
        fhour = 0  # Offset for initial time; incremented for each timestamp
        for t in range(0, num_times):
            t_ordinal_time = sample_file['time'][:][t]
            # If time is in window for event trajectory, save to file
            if (t_ordinal_time >= window_start) and (t_ordinal_time <= window_end):
                timestamp = custom_ord2date(t_ordinal_time)
                print('  Time stamp: ' + str(timestamp))

                # Set temporary output ARL data file
                temp_filename = os.path.join(outdatadir, 'cam_to_arl_temp_event' + event_ID + '.arl')
                temp_file = addfile(temp_filename, 'c', dtype='arl')
                temp_file.setlevels(levels)
                temp_file.set2dvar(varmap_2d.values())
                for l in levels:
                    temp_file.set3dvar(varmap_3d.values())

                # Write ARL data file
                temp_file.setx(sample_variable.dimvalue(lon_index))
                temp_file.sety(sample_variable.dimvalue(lat_index))
                # In getdatahead below, integer is "vertical coordinate system flag":
                #     1 (sigma fraction), 2 (pressure mb), 3 (terrain fraction), 4 (hybrid sigma-pressure)
                data_header = temp_file.getdatahead(sample_file.proj, 'CAM5', 4, fhour)
                # modify data header grid parameter(s)
                #    for lat-lon grid, Pole Longitude must be maximum longitude value
                data_header.POLE_LON = max(sample_variable.dimvalue(lon_index))
                # Pre-write index record without data record - will be over-written later
                temp_file.writeindexrec(timestamp, data_header)

                # List of data records for this timestamp
                full_data_record = []

                # Write 2-D Variables: surface pressure
                surface_data_record = []
                for camkey,arlkey in varmap_2d.items():
                    variable_file = h_to_file[name_to_h[camkey]]
                    variable = variable_file[camkey][t, :, :] * unitmap_2d[camkey]
                    single_data_record = temp_file.writedatarec(timestamp, 0, arlkey, fhour, 99, variable)  # write surface level (index 0)
                    surface_data_record.append(single_data_record)
                full_data_record.append(surface_data_record)

                # Write 3-D Variables
                #    loop over level indices in reverse order
                #    CAM levels run TOA -> surface but HYSPLIT is expecting surface -> TOA
                #    write to ARL in reverse order: level index nz-1 -> level 1 (surface) and 0 -> nz (TOA)
                for idx_lev in range(nz-1, -1, -1):
                    level_data_record = []
                    for camkey,arlkey in varmap_3d.items():
                        variable_file = h_to_file[name_to_h[camkey]]
                        variable = variable_file[camkey][t, idx_lev, :, :] * unitmap_3d[camkey]
                        single_data_record = temp_file.writedatarec(timestamp, nz - idx_lev, arlkey, fhour, 99, variable)
                        level_data_record.append(single_data_record)
                    full_data_record.append(level_data_record)

                # Re-write index record with data record
                temp_file.writeindexrec(timestamp, data_header, full_data_record)
                temp_file.close()
                # Append the temp output file to the main output file
                os.system("cat " + temp_filename + " >> " + out_filename)
                # Delete the temp output file
                os.system("rm " + temp_filename)
                fhour += 1
                if fhour >= 99:
                    fhour = 99
        print('Finished event {}\n'.format(event_ID))
print('Finished!')